{"version":3,"sources":["Keyboard.js","Puzzleboard.js","App.js","index.js"],"names":["Keyboard","props","revealOne","revealAll","revealPuzzle","hideAll","useState","letter","setLetter","placeholder","maxLength","style","width","value","onChange","event","toUpperCase","updateLetter","target","onClick","Letter","this","revealed","Blank","Word","letters","Line","size","Puzzleboard","category","words","answer","split","map","word","lines","forEach","currentLine","slice","pop","length","push","generateLines","setLines","lineParams","buffer","lineStrings","line","join","index","defaultParams","src","alt","letterToReveal","newLines","BreakException","reveal","e","hide","App","setCategory","setAnswer","Body","styled","div","path","onSubmit","preventDefault","type","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d72137a0.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Keyboard = (props) => {\n  const { revealOne, revealAll, revealPuzzle, hideAll } = props;\n\n  const [letter, setLetter] = useState(\"\")\n\n  const updateLetter = (letter) => {\n    setLetter(letter.toUpperCase())\n  }\n\n  return(\n    <>\n      <input placeholder=\"?\" maxLength=\"1\" style={{width: \"1em\"}} value={letter} onChange={(event) => updateLetter(event.target.value)}/>\n      <br/>\n      <button onClick={() => {revealOne(letter)}}>{`Reveal One ${letter}`}</button>\n      <br/>\n      <button onClick={() => {revealAll(letter)}}>{`Reveal Each ${letter}`}</button>\n      <br/>\n      <button onClick={() => {hideAll(letter)}}>{`Hide Each ${letter}`}</button>\n      <br/>\n      <button onClick={revealPuzzle}>Reveal Puzzle</button>\n    </>\n  )\n}\n\nexport default Keyboard;","import React, { useState } from 'react';\nimport Keyboard from './Keyboard';\nclass Letter {\n  constructor(letter) {\n    this.letter = letter\n    this.revealed = false\n  }\n\n  toggle() {\n    this.revealed = !this.revealed\n  }\n\n  reveal() {\n    this.revealed = true\n  }\n\n  hide() {\n    this.revealed = false\n  }\n}\n\nclass Blank extends Letter {\n  constructor() {\n    super(\"+\")\n    this.revealed = true\n  }\n}\n\nclass Word {\n  constructor(letters) {\n    this.letters = letters\n  }\n}\n\nclass Line {\n  constructor(size) {\n    this.size = 12\n    this.letters = []\n  }\n}\n\nconst Puzzleboard = (props) => {\n  const { category, answer } = props\n\n  const words = answer.split(\" \").map(word => new Word(word.split(\"\").map(letter => new Letter(letter))))\n\n  const generateLines = () => {\n    const lines = [new Line()]\n    words.forEach(word => {\n      let currentLine = lines.slice(-1).pop()\n      if ( currentLine.letters.length + word.letters.length + 1 > currentLine.size ) {\n        lines.push(new Line())\n        currentLine = lines.slice(-1).pop()\n      }\n      if (currentLine.letters.length !== 0) { currentLine.letters.push(new Blank()) }\n      word.letters.forEach(letter => currentLine.letters.push(letter))    \n    })\n    return lines\n  }\n  \n  const [lines, setLines] = useState(generateLines())\n\n  const lineParams = () => {\n    const linesAsLetters = lines.map(line => line.letters.map(letter => letter.revealed ? letter.letter : \"_\"))\n    const lineStrings = linesAsLetters.map(line => line.join(''))\n    \n    let buffer;\n    switch(lineStrings.length) {\n      case 1:\n      case 2:\n        buffer = 2\n        break;\n      default:\n        buffer = 1\n    }\n    \n    return lineStrings.map((line, index) => `ln${index + buffer}=${line}`).join('&')\n  }\n\n  const revealPuzzle = () => {\n    const newLines = [...lines]\n    newLines.forEach(line => {\n      line.letters.forEach(letter => {\n        letter.reveal()\n      })\n    })\n    setLines(newLines)\n  }\n\n  const revealOne = (letterToReveal) => {\n    const newLines = [...lines]\n    const BreakException = {}\n    try {\n      newLines.forEach(line => {\n        line.letters.forEach(letter => {\n          if (letter.letter === letterToReveal && !letter.revealed) {\n            letter.reveal();\n            throw BreakException; \n          }\n        })\n      })\n    } catch (e) {}\n\n    setLines(newLines)\n  }\n\n  const revealAll = (letterToReveal) => {\n    const newLines = [...lines]\n    newLines.forEach(line => {\n      line.letters.forEach(letter => {\n        if (letter.letter === letterToReveal) { letter.reveal() }\n      })\n    })\n    setLines(newLines)\n  }\n\n  const hideAll = (letterToReveal) => {\n    const newLines = [...lines]\n    newLines.forEach(line => {\n      line.letters.forEach(letter => {\n        if (letter.letter === letterToReveal) { letter.hide() }\n      })\n    })\n    setLines(newLines)\n  }\n\n  const defaultParams = () => (`bg=2&cat=${category}`)\n  const thumbnailUrl = () => (`https://www.thewordfinder.com/wof-puzzle-generator/puzzle-thumb.php?${defaultParams()}&${lineParams()}`)\n  const puzzleUrl = () => (`https://www.thewordfinder.com/wof-puzzle-generator/puzzle.php?${defaultParams()}&${lineParams()}`)\n  \n  return (\n    <>\n      <img src={thumbnailUrl()} alt=\"puzzleboard\" width=\"500px\"/>  \n      <p>{puzzleUrl()}</p>\n      <Keyboard revealOne={revealOne} revealAll={revealAll} hideAll={hideAll} revealPuzzle={revealPuzzle}/>\n    </>\n  );\n}\n\nexport default Puzzleboard;\n","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\";\nimport styled from \"styled-components\"\nimport Puzzleboard from \"./Puzzleboard\"\n\nconst App = () => {\n  const [category, setCategory] = useState(\"TITLE\")\n  const [answer, setAnswer] = useState(\"WHEEL OF FORTUNE\")\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n  }\n\n  const Body = styled.div`\n    input {\n      font-size: 5rem;\n    }\n    button {\n      font-size: 3rem;\n    }\n  `;\n\n  return (\n    <Body>\n      <Router>\n        <Switch>\n          <Route path=\"/play\">\n            <Puzzleboard category={category} answer={answer} />\n          </Route>\n          <Route path=\"/\">\n            <h1>Wheel of Fortune Puzzle Manager</h1>\n            <form onSubmit={handleSubmit}>\n              <label>\n                Category:\n                <input type=\"text\" placeholder=\"TITLE\" value={category} onChange={(event) => setCategory(event.target.value)} />\n              </label>\n              <br/>\n              <label>\n                Puzzle:\n                <input type=\"text\" placeholder=\"WHEEL OF FORTUNE\" value={answer} onChange={(event) => setAnswer(event.target.value)} />\n              </label>\n              <br/>\n            </form>\n            <NavLink to=\"/play\">\n              Start Game\n            </NavLink>\n          </Route>\n        </Switch>\n      </Router>\n    </Body>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}