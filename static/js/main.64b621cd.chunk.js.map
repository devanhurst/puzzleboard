{"version":3,"sources":["Keyboard.js","Puzzleboard.js","App.js","index.js"],"names":["Keyboard","props","revealOne","revealAll","revealPuzzle","hideAll","useState","letter","setLetter","placeholder","maxLength","style","width","value","onChange","event","toUpperCase","updateLetter","target","onClick","Letter","this","revealed","Blank","Word","letters","Line","size","StyledPuzzleboard","styled","div","Puzzleboard","category","words","answer","split","map","word","lines","forEach","currentLine","slice","pop","length","push","generateLines","setLines","lineParams","buffer","lineStrings","line","encodeURIComponent","join","index","defaultParams","src","alt","letterToReveal","newLines","BreakException","reveal","e","hide","App","setCategory","setAnswer","path","onSubmit","preventDefault","type","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64b621cd.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Keyboard = (props) => {\n  const { revealOne, revealAll, revealPuzzle, hideAll } = props;\n\n  const [letter, setLetter] = useState(\"\")\n\n  const updateLetter = (letter) => {\n    setLetter(letter.toUpperCase())\n  }\n\n  return(\n    <>\n      <input placeholder=\"?\" maxLength=\"1\" style={{width: \"1em\"}} value={letter} onChange={(event) => updateLetter(event.target.value)}/>\n      <br/>\n      <button onClick={() => {revealOne(letter)}}>{`Reveal One ${letter}`}</button>\n      <br/>\n      <button onClick={() => {revealAll(letter)}}>{`Reveal Each ${letter}`}</button>\n      <br/>\n      <button onClick={() => {hideAll(letter)}}>{`Hide Each ${letter}`}</button>\n      <br/>\n      <button onClick={revealPuzzle}>Reveal Puzzle</button>\n    </>\n  )\n}\n\nexport default Keyboard;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Keyboard from './Keyboard';\nclass Letter {\n  constructor(letter) {\n    this.letter = letter\n    this.revealed = false\n  }\n\n  toggle() {\n    this.revealed = !this.revealed\n  }\n\n  reveal() {\n    this.revealed = true\n  }\n\n  hide() {\n    this.revealed = false\n  }\n}\n\nclass Blank extends Letter {\n  constructor() {\n    super(\" \")\n    this.revealed = true\n  }\n}\n\nclass Word {\n  constructor(letters) {\n    this.letters = letters\n  }\n}\n\nclass Line {\n  constructor(size) {\n    this.size = 12\n    this.letters = []\n  }\n}\n\n\nconst StyledPuzzleboard = styled.div`\n  input {\n    font-size: 5rem;\n  }\n  button {\n    font-size: 3rem;\n  }\n`;\n\nconst Puzzleboard = (props) => {\n  const { category, answer } = props\n\n  const words = answer.split(\" \").map(word => new Word(word.split(\"\").map(letter => new Letter(letter))))\n\n  const generateLines = () => {\n    const lines = [new Line()]\n    words.forEach(word => {\n      let currentLine = lines.slice(-1).pop()\n      if ( currentLine.letters.length + word.letters.length + 1 > currentLine.size ) {\n        lines.push(new Line())\n        currentLine = lines.slice(-1).pop()\n      }\n      if (currentLine.letters.length !== 0) { currentLine.letters.push(new Blank()) }\n      word.letters.forEach(letter => currentLine.letters.push(letter))    \n    })\n    return lines\n  }\n  \n  const [lines, setLines] = useState(generateLines())\n\n  const lineParams = () => {\n    const linesAsLetters = lines.map(line => line.letters.map(letter => letter.revealed ? encodeURIComponent(letter.letter) : \"_\"))\n    const lineStrings = linesAsLetters.map(line => line.join(''))\n    \n    let buffer;\n    switch(lineStrings.length) {\n      case 1:\n      case 2:\n        buffer = 2\n        break;\n      default:\n        buffer = 1\n    }\n    \n    \n    return lineStrings.map((line, index) => `ln${index + buffer}=${line}`).join('&')\n  }\n\n  const revealPuzzle = () => {\n    const newLines = [...lines]\n    newLines.forEach(line => {\n      line.letters.forEach(letter => {\n        letter.reveal()\n      })\n    })\n    setLines(newLines)\n  }\n\n  const revealOne = (letterToReveal) => {\n    const newLines = [...lines]\n    const BreakException = {}\n    try {\n      newLines.forEach(line => {\n        line.letters.forEach(letter => {\n          if (letter.letter === letterToReveal && !letter.revealed) {\n            letter.reveal();\n            throw BreakException; \n          }\n        })\n      })\n    } catch (e) {}\n\n    setLines(newLines)\n  }\n\n  const revealAll = (letterToReveal) => {\n    const newLines = [...lines]\n    newLines.forEach(line => {\n      line.letters.forEach(letter => {\n        if (letter.letter === letterToReveal) { letter.reveal() }\n      })\n    })\n    setLines(newLines)\n  }\n\n  const hideAll = (letterToReveal) => {\n    const newLines = [...lines]\n    newLines.forEach(line => {\n      line.letters.forEach(letter => {\n        if (letter.letter === letterToReveal) { letter.hide() }\n      })\n    })\n    setLines(newLines)\n  }\n\n  const defaultParams = () => (`bg=2&cat=${encodeURIComponent(category)}`)\n  const thumbnailUrl = () => (`https://www.thewordfinder.com/wof-puzzle-generator/puzzle-thumb.php?${defaultParams()}&${lineParams()}`)\n  const puzzleUrl = () => (`https://www.thewordfinder.com/wof-puzzle-generator/puzzle.php?${defaultParams()}&${lineParams()}`)\n  \n  return (\n    <StyledPuzzleboard>\n      <img src={thumbnailUrl()} alt=\"puzzleboard\" width=\"500px\"/>  \n      <p>{puzzleUrl()}</p>\n      <Keyboard revealOne={revealOne} revealAll={revealAll} hideAll={hideAll} revealPuzzle={revealPuzzle}/>\n    </StyledPuzzleboard>\n  );\n}\n\nexport default Puzzleboard;\n","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\";\nimport Puzzleboard from \"./Puzzleboard\"\n\nconst App = () => {\n  const [category, setCategory] = useState(\"TITLE\")\n  const [answer, setAnswer] = useState(\"WHEEL OF FORTUNE\")\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n  }\n\n  const updateCategory = (event) => {\n    setCategory(event.target.value.toUpperCase())\n  }\n\n  const updateAnswer = (event) => {\n    setAnswer(event.target.value.toUpperCase())\n  }\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/puzzleboard/play\">\n          <Puzzleboard category={category} answer={answer} />\n        </Route>\n        <Route path=\"/puzzleboard\">\n          <h1>Wheel of Fortune Puzzle Manager</h1>\n          <form onSubmit={handleSubmit}>\n            <label>\n              Category:\n              <input type=\"text\" placeholder=\"TITLE\" value={category} onChange={updateCategory} />\n            </label>\n            <br/>\n            <label>\n              Puzzle:\n              <input type=\"text\" placeholder=\"WHEEL OF FORTUNE\" value={answer} onChange={updateAnswer} />\n            </label>\n            <br/>\n          </form>\n          <NavLink to=\"/puzzleboard/play\">\n            Start Game\n          </NavLink>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}